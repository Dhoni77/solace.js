{
	"id": 0,
	"name": "solace.js",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "Client",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a client that interacts with a WebSocket and communicates with discord."
					}
				]
			},
			"children": [
				{
					"id": 42,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 27,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L27"
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "new Client",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new Client instance."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/Client.ts",
									"line": 27,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L27"
								}
							],
							"parameters": [
								{
									"id": 44,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The client configuration options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 127,
										"name": "default",
										"package": "solace.js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 47,
					"name": "options",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The client configuration options."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 27,
							"character": 23,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L27"
						}
					],
					"type": {
						"type": "reference",
						"target": 127,
						"name": "default",
						"package": "solace.js"
					}
				},
				{
					"id": 46,
					"name": "user",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user associated with the client if logged in."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 21,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L21"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 235,
								"name": "default",
								"package": "solace.js"
							}
						]
					},
					"defaultValue": "null"
				},
				{
					"id": 45,
					"name": "ws",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The WebSocket client used by the main client."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 16,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L16"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							}
						]
					},
					"defaultValue": "null"
				},
				{
					"id": 39,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 390,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 39,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 40,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 397,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 41,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 434,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 38,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 383,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 38,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 66,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 454,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 67,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 454,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 68,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 69,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 70,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 454,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 71,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 454,
															"character": 66
														}
													],
													"parameters": [
														{
															"id": 72,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 101,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 716,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 102,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 716,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 103,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 104,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 123,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 779,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 124,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 779,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 93,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 631,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 94,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 41
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 631,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 105,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 725,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 106,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 725,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 107,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 108,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 95,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 644,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 96,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 644,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 97,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 64,
					"name": "login",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 60,
							"character": 17,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L60"
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "login",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Asynchronously log in the client by establishing a WebSocket connection."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/Client.ts",
									"line": 60,
									"character": 17,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L60"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 80,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 604,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 81,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 604,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 82,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 83,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 84,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 604,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 85,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 604,
															"character": 58
														}
													],
													"parameters": [
														{
															"id": 86,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 56,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 53,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L53"
						}
					],
					"signatures": [
						{
							"id": 57,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register an event listener for the specified event."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "- The current Client instance."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/Client.ts",
									"line": 53,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L53"
								}
							],
							"typeParameter": [
								{
									"id": 58,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "ready"
									}
								}
							],
							"parameters": [
								{
									"id": 59,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "K",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 60,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event listener."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 61,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/Client.ts",
													"line": 53,
													"character": 57,
													"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L53"
												}
											],
											"signatures": [
												{
													"id": 62,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "src/client/Client.ts",
															"line": 53,
															"character": 57,
															"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L53"
														}
													],
													"parameters": [
														{
															"id": 63,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"target": -1,
																	"name": "K",
																	"refersToTypeParameter": true
																},
																"objectType": {
																	"type": "reference",
																	"target": 125,
																	"name": "default",
																	"package": "solace.js"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 48,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "src/client/Client.ts",
							"line": 43,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L43"
						}
					],
					"signatures": [
						{
							"id": 49,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Register a one-time event listener for the specified event."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The current Client instance."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/Client.ts",
									"line": 43,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L43"
								}
							],
							"typeParameter": [
								{
									"id": 50,
									"name": "K",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "literal",
										"value": "ready"
									}
								}
							],
							"parameters": [
								{
									"id": 51,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": -1,
										"name": "K",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 52,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event listener."
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 53,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "src/client/Client.ts",
													"line": 43,
													"character": 59,
													"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L43"
												}
											],
											"signatures": [
												{
													"id": 54,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"sources": [
														{
															"fileName": "src/client/Client.ts",
															"line": 43,
															"character": 59,
															"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L43"
														}
													],
													"parameters": [
														{
															"id": 55,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isRest": true
															},
															"type": {
																"type": "indexedAccess",
																"indexType": {
																	"type": "reference",
																	"target": -1,
																	"name": "K",
																	"refersToTypeParameter": true
																},
																"objectType": {
																	"type": "reference",
																	"target": 125,
																	"name": "default",
																	"package": "solace.js"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 109,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 743,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 110,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 743,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 111,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 112,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 113,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 743,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 114,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 743,
															"character": 70
														}
													],
													"parameters": [
														{
															"id": 115,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 116,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 759,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 117,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 759,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 118,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 119,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 120,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 759,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 121,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 759,
															"character": 74
														}
													],
													"parameters": [
														{
															"id": 122,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 98,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 675,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 99,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 675,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 100,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 87,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 615,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 615,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 89,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 73,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 599,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 599,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 75,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 76,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 77,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 599,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 78,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 599,
															"character": 69
														}
													],
													"parameters": [
														{
															"id": 79,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 90,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 625,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 91,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 625,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 92,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 1,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 31,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 375,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 32,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 375,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 33,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 34,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 35,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 375,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 36,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 375,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 37,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@types/node/globals.d.ts",
									"qualifiedName": "Disposable"
								},
								"name": "Disposable",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.addAbortListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.addAbortListener"
					}
				},
				{
					"id": 20,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 296,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 21,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 296,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 22,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "_DOMEventTarget"
												},
												"name": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 23,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 24,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 325,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 325,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 26,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "_DOMEventTarget"
												},
												"name": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 16,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 268,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 17,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 268,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 18,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 19,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 11,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 250,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 12,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 250,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 13,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 14,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"qualifiedName": "AsyncIterableIterator"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 2,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 189,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 190,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 189,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 4,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "_NodeEventTarget"
										},
										"name": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 5,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 6,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 7,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 190,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 8,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "_DOMEventTarget"
										},
										"name": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 9,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 10,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 27,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 340,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 28,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 340,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 29,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 30,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/@types/node/events.d.ts",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/@types/node/events.d.ts",
														"qualifiedName": "_DOMEventTarget"
													},
													"name": "_DOMEventTarget",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						42
					]
				},
				{
					"title": "Properties",
					"children": [
						47,
						46,
						45,
						39,
						40,
						41,
						38
					]
				},
				{
					"title": "Methods",
					"children": [
						66,
						101,
						123,
						93,
						105,
						95,
						64,
						80,
						56,
						48,
						109,
						116,
						98,
						87,
						73,
						90,
						31,
						20,
						24,
						16,
						11,
						2,
						27
					]
				}
			],
			"sources": [
				{
					"fileName": "src/client/Client.ts",
					"line": 11,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/Client.ts#L11"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/@types/node/events.d.ts",
						"qualifiedName": "EventEmitter"
					},
					"name": "EventEmitter",
					"package": "@types/node"
				}
			]
		},
		{
			"id": 130,
			"name": "Constants",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A utility class containing constants related to the Discord API."
					}
				]
			},
			"children": [
				{
					"id": 133,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 134,
							"name": "new Constants",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 130,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 131,
					"name": "API",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The base URL of the Discord API (v10)."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/Constants.ts",
							"line": 9,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/Constants.ts#L9"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"https://discord.com/api/v10/\""
				},
				{
					"id": 132,
					"name": "GATEWAY",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The URL for accessing the Discord Gateway API, which is derived from the API base URL."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/Constants.ts",
							"line": 14,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/Constants.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						133
					]
				},
				{
					"title": "Properties",
					"children": [
						131,
						132
					]
				}
			],
			"sources": [
				{
					"fileName": "src/config/Constants.ts",
					"line": 4,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/Constants.ts#L4"
				}
			]
		},
		{
			"id": 135,
			"name": "Event",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents an event that can be handled by the client."
					}
				]
			},
			"children": [
				{
					"id": 136,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "src/helper/Event.ts",
							"line": 14,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 137,
							"name": "new Event",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new Event instance."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/helper/Event.ts",
									"line": 14,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 138,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "literal",
										"value": "ready"
									}
								},
								{
									"id": 139,
									"name": "once",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Indicates whether the event should only be handled once."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 135,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 140,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The name of the event."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/helper/Event.ts",
							"line": 14,
							"character": 23,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L14"
						}
					],
					"type": {
						"type": "literal",
						"value": "ready"
					}
				},
				{
					"id": 141,
					"name": "once",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the event should only be handled once."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/helper/Event.ts",
							"line": 14,
							"character": 56,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 142,
					"name": "execute",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/helper/Event.ts",
							"line": 23,
							"character": 17,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L23"
						}
					],
					"signatures": [
						{
							"id": 143,
							"name": "execute",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Executes the event's logic.\r\nThis method should be overridden by subclasses to provide specific event handling logic."
									}
								],
								"blockTags": [
									{
										"tag": "@throws",
										"content": [
											{
												"kind": "text",
												"text": "- If the event subclass does not implement the execute method."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/helper/Event.ts",
									"line": 23,
									"character": 17,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L23"
								}
							],
							"parameters": [
								{
									"id": 144,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The client instance."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1,
										"name": "default",
										"package": "solace.js"
									}
								},
								{
									"id": 145,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Additional arguments passed when the event is triggered."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						136
					]
				},
				{
					"title": "Properties",
					"children": [
						140,
						141
					]
				},
				{
					"title": "Methods",
					"children": [
						142
					]
				}
			],
			"sources": [
				{
					"fileName": "src/helper/Event.ts",
					"line": 7,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Event.ts#L7"
				}
			]
		},
		{
			"id": 146,
			"name": "EventHandler",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A utility class for handling Discord events received by the client."
					}
				]
			},
			"children": [
				{
					"id": 155,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 156,
							"name": "new EventHandler",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 146,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 151,
					"name": "MESSAGE_CREATE",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/util/EventHandler.ts",
							"line": 27,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/EventHandler.ts#L27"
						}
					],
					"signatures": [
						{
							"id": 152,
							"name": "MESSAGE_CREATE",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Handles the \"MESSAGE_CREATE\" event by."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/util/EventHandler.ts",
									"line": 27,
									"character": 18,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/EventHandler.ts#L27"
								}
							],
							"parameters": [
								{
									"id": 153,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The client instance."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1,
										"name": "default",
										"package": "solace.js"
									}
								},
								{
									"id": 154,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data associated with the \"MESSAGE_CREATE\" event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 147,
					"name": "READY",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/util/EventHandler.ts",
							"line": 14,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/EventHandler.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "READY",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Handles the \"READY\" event."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/util/EventHandler.ts",
									"line": 14,
									"character": 18,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/EventHandler.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 149,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The client instance."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1,
										"name": "default",
										"package": "solace.js"
									}
								},
								{
									"id": 150,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data associated with the \"READY\" event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						155
					]
				},
				{
					"title": "Methods",
					"children": [
						151,
						147
					]
				}
			],
			"sources": [
				{
					"fileName": "src/util/EventHandler.ts",
					"line": 7,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/EventHandler.ts#L7"
				}
			]
		},
		{
			"id": 157,
			"name": "GatewayIntents",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A utility class for managing Discord Gateway Intents."
					}
				]
			},
			"children": [
				{
					"id": 180,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 181,
							"name": "new GatewayIntents",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 157,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 175,
					"name": "AUTO_MODERATION_CONFIGURATION",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"AUTO_MODERATION_CONFIGURATION\" intent, allowing access to auto-moderation configuration-related events and data."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 94,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L94"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 176,
					"name": "AUTO_MODERATION_EXECUTION",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"AUTO_MODERATION_EXECUTION\" intent, allowing access to auto-moderation execution-related events and data."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 99,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L99"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 170,
					"name": "DIRECT_MESSAGES",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"DIRECT_MESSAGES\" intent, allowing access to direct message-related events and data."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 69,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L69"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 171,
					"name": "DIRECT_MESSAGE_REACTIONS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"DIRECT_MESSAGE_REACTIONS\" intent, allowing access to direct message reaction-related events and data."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 74,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L74"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 172,
					"name": "DIRECT_MESSAGE_TYPING",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"DIRECT_MESSAGE_TYPING\" intent, allowing access to direct message typing-related events."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 79,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L79"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 158,
					"name": "GUILDS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILDS\" intent, allowing access to guilds and guild-related data."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 9,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L9"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 161,
					"name": "GUILD_EMOJIS_AND_STICKERS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_EMOJIS_AND_STICKERS\" intent, allowing access to emoji and sticker-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 24,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 162,
					"name": "GUILD_INTEGRATIONS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_INTEGRATIONS\" intent, allowing access to integration-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 29,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 164,
					"name": "GUILD_INVITES",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_INVITES\" intent, allowing access to invite-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 39,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L39"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 159,
					"name": "GUILD_MEMBERS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_MEMBERS\" intent, allowing access to member-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 14,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 167,
					"name": "GUILD_MESSAGES",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_MESSAGES\" intent, allowing access to message-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 54,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L54"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 168,
					"name": "GUILD_MESSAGE_REACTIONS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_MESSAGE_REACTIONS\" intent, allowing access to message reaction-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 59,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L59"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 169,
					"name": "GUILD_MESSAGE_TYPING",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_MESSAGE_TYPING\" intent, allowing access to message typing-related events within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 64,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L64"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 160,
					"name": "GUILD_MODERATION",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_MODERATION\" intent, allowing access to moderation-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 19,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L19"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 166,
					"name": "GUILD_PRESENCES",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_PRESENCES\" intent, allowing access to presence-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 49,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L49"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 174,
					"name": "GUILD_SCHEDULED_EVENTS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_SCHEDULED_EVENTS\" intent, allowing access to scheduled event-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 89,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L89"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 165,
					"name": "GUILD_VOICE_STATES",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_VOICE_STATES\" intent, allowing access to voice state-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 44,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 163,
					"name": "GUILD_WEBHOOKS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"GUILD_WEBHOOKS\" intent, allowing access to webhook-related events and data within guilds."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 34,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 173,
					"name": "MESSAGE_CONTENT",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"MESSAGE_CONTENT\" intent, allowing access to message content and partial message events."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 84,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L84"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 177,
					"name": "combineIntents",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/config/GatewayIntents.ts",
							"line": 106,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L106"
						}
					],
					"signatures": [
						{
							"id": 178,
							"name": "combineIntents",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Combines multiple Gateway Intents into a single numeric value."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "- The combined Gateway Intents as a numeric value."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "src/config/GatewayIntents.ts",
									"line": 106,
									"character": 18,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L106"
								}
							],
							"parameters": [
								{
									"id": 179,
									"name": "intents",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Gateway Intents to combine."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						180
					]
				},
				{
					"title": "Properties",
					"children": [
						175,
						176,
						170,
						171,
						172,
						158,
						161,
						162,
						164,
						159,
						167,
						168,
						169,
						160,
						166,
						174,
						165,
						163,
						173
					]
				},
				{
					"title": "Methods",
					"children": [
						177
					]
				}
			],
			"sources": [
				{
					"fileName": "src/config/GatewayIntents.ts",
					"line": 4,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/GatewayIntents.ts#L4"
				}
			]
		},
		{
			"id": 182,
			"name": "OpCodes",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A utility class for managing Discord Gateway operation codes (OpCodes)."
					}
				]
			},
			"children": [
				{
					"id": 194,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 195,
							"name": "new OpCodes",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 182,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 183,
					"name": "DISPATCH",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"DISPATCH\" operation code used for dispatching events from discord."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 9,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L9"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 184,
					"name": "HEARTBEAT",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"HEARTBEAT\" operation code used for heartbeating to keep the connection alive."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 14,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L14"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "1"
				},
				{
					"id": 193,
					"name": "HEARTBEAT_ACK",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"HEARTBEAT_ACK\" operation code used for acknowledging received heartbeats."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 59,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L59"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "11"
				},
				{
					"id": 192,
					"name": "HELLO",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"HELLO\" operation code used for acknowledging the connection and receiving heartbeat intervals."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 54,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L54"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "10"
				},
				{
					"id": 185,
					"name": "IDENTIFY",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"IDENTIFY\" operation code used for identifying with discord."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 19,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L19"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "2"
				},
				{
					"id": 191,
					"name": "INVALID_SESSION",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"INVALID_SESSION\" operation code used for handling an invalid session."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 49,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L49"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "9"
				},
				{
					"id": 186,
					"name": "PRESENCE_UPDATE",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"PRESENCE_UPDATE\" operation code used for updating the client's presence."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 24,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L24"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "3"
				},
				{
					"id": 189,
					"name": "RECONNECT",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"RECONNECT\" operation code used for reconnecting to discord."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 39,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L39"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "7"
				},
				{
					"id": 190,
					"name": "REQUEST_GUILD_MEMBERS",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"REQUEST_GUILD_MEMBERS\" operation code used for requesting guild members."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 44,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "8"
				},
				{
					"id": 188,
					"name": "RESUME",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"RESUME\" operation code used for resuming a connection."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 34,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "6"
				},
				{
					"id": 187,
					"name": "VOICE_STATE_UPDATE",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"VOICE_STATE_UPDATE\" operation code used for updating voice states."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/OpCodes.ts",
							"line": 29,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "4"
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						194
					]
				},
				{
					"title": "Properties",
					"children": [
						183,
						184,
						193,
						192,
						185,
						191,
						186,
						189,
						190,
						188,
						187
					]
				}
			],
			"sources": [
				{
					"fileName": "src/config/OpCodes.ts",
					"line": 4,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/OpCodes.ts#L4"
				}
			]
		},
		{
			"id": 196,
			"name": "Registry",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A utility class that can be used to register commands, events, and more."
					}
				]
			},
			"children": [
				{
					"id": 201,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 202,
							"name": "new Registry",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 196,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 197,
					"name": "registerEvents",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/helper/Registry.ts",
							"line": 14,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Registry.ts#L14"
						}
					],
					"signatures": [
						{
							"id": 198,
							"name": "registerEvents",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Registers a list of events with a Discord client."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/helper/Registry.ts",
									"line": 14,
									"character": 18,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Registry.ts#L14"
								}
							],
							"parameters": [
								{
									"id": 199,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Discord client instance."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1,
										"name": "default",
										"package": "solace.js"
									}
								},
								{
									"id": 200,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isRest": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The list of events to register."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 135,
											"name": "default",
											"package": "solace.js"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						201
					]
				},
				{
					"title": "Methods",
					"children": [
						197
					]
				}
			],
			"sources": [
				{
					"fileName": "src/helper/Registry.ts",
					"line": 7,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/helper/Registry.ts#L7"
				}
			]
		},
		{
			"id": 203,
			"name": "SolaceError",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Custom error class for handling WebsocketClient errors with specific error codes."
					}
				]
			},
			"children": [
				{
					"id": 214,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "src/util/SolaceError.ts",
							"line": 9,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/SolaceError.ts#L9"
						}
					],
					"signatures": [
						{
							"id": 215,
							"name": "new SolaceError",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new SolaceError instance with a specific error code."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/util/SolaceError.ts",
									"line": 9,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/SolaceError.ts#L9"
								}
							],
							"parameters": [
								{
									"id": 216,
									"name": "code",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The error code."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 203,
								"name": "default",
								"package": "solace.js"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "Error.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "Error.constructor"
					}
				},
				{
					"id": 218,
					"name": "message",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1068,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Error.message"
					}
				},
				{
					"id": 217,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1067,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Error.name"
					}
				},
				{
					"id": 219,
					"name": "stack",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/typescript/lib/lib.es5.d.ts",
							"line": 1069,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Error.stack"
					}
				},
				{
					"id": 208,
					"name": "prepareStackTrace",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/globals.d.ts",
							"line": 11,
							"character": 4
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 209,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/globals.d.ts",
									"line": 11,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 210,
									"name": "__type",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Optional override for formatting stack traces"
											}
										],
										"blockTags": [
											{
												"tag": "@see",
												"content": [
													{
														"kind": "text",
														"text": "https://v8.dev/docs/stack-trace-api#customizing-stack-traces"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/globals.d.ts",
											"line": 11,
											"character": 25
										}
									],
									"parameters": [
										{
											"id": 211,
											"name": "err",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										},
										{
											"id": 212,
											"name": "stackTraces",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/@types/node/globals.d.ts",
														"qualifiedName": "NodeJS.CallSite"
													},
													"name": "CallSite",
													"package": "@types/node",
													"qualifiedName": "NodeJS.CallSite"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Error.prepareStackTrace"
					}
				},
				{
					"id": 213,
					"name": "stackTraceLimit",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/globals.d.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Error.stackTraceLimit"
					}
				},
				{
					"id": 204,
					"name": "captureStackTrace",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/globals.d.ts",
							"line": 4,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 205,
							"name": "captureStackTrace",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Create .stack property on a target object"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/globals.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"parameters": [
								{
									"id": 206,
									"name": "targetObject",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 207,
									"name": "constructorOpt",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "Error.captureStackTrace"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "Error.captureStackTrace"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						214
					]
				},
				{
					"title": "Properties",
					"children": [
						218,
						217,
						219,
						208,
						213
					]
				},
				{
					"title": "Methods",
					"children": [
						204
					]
				}
			],
			"sources": [
				{
					"fileName": "src/util/SolaceError.ts",
					"line": 4,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/util/SolaceError.ts#L4"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
						"qualifiedName": "Error"
					},
					"name": "Error",
					"package": "typescript"
				}
			]
		},
		{
			"id": 220,
			"name": "SolaceIntents",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A utility class for defining intent combinations for different types of Discord bots."
					}
				]
			},
			"children": [
				{
					"id": 233,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 234,
							"name": "new SolaceIntents",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 220,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 232,
					"name": "AUTO_MODERATION",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with auto-moderation Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 112,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L112"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 230,
					"name": "DIRECT_MESSAGE_MONITOR",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with direct message monitor Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 95,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L95"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 225,
					"name": "EMOJI_MANAGER",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with emoji and sticker management Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 55,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L55"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 221,
					"name": "GENERAL",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with general-purpose Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 11,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L11"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 226,
					"name": "INTEGRATION_MANAGER",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with guild integration management Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 63,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L63"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 224,
					"name": "INVITE_TRACKER",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with invite tracker Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 47,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L47"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 231,
					"name": "MESSAGE_CONTENT_MONITOR",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with message content monitor Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 104,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L104"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 222,
					"name": "MODERATION",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with moderation Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 22,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L22"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 223,
					"name": "MUSIC",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with music Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 35,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L35"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 229,
					"name": "PRESENCE_MONITOR",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with guild presence monitor Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 87,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L87"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 228,
					"name": "VOICE_STATE_MONITOR",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with voice state monitor Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 79,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L79"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				},
				{
					"id": 227,
					"name": "WEBHOOK_MANAGER",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true,
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Intents that help with webhook management Discord bots."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/config/SolaceIntents.ts",
							"line": 71,
							"character": 18,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L71"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						233
					]
				},
				{
					"title": "Properties",
					"children": [
						232,
						230,
						225,
						221,
						226,
						224,
						231,
						222,
						223,
						229,
						228,
						227
					]
				}
			],
			"sources": [
				{
					"fileName": "src/config/SolaceIntents.ts",
					"line": 6,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/config/SolaceIntents.ts#L6"
				}
			]
		},
		{
			"id": 235,
			"name": "User",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a user on Discord."
					}
				]
			},
			"children": [
				{
					"id": 236,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 95,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L95"
						}
					],
					"signatures": [
						{
							"id": 237,
							"name": "new User",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Constructs a new User instance."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/structures/User.ts",
									"line": 95,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L95"
								}
							],
							"parameters": [
								{
									"id": 238,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The user data."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 235,
								"name": "default",
								"package": "solace.js"
							}
						}
					]
				},
				{
					"id": 239,
					"name": "accentColor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's base 10 accent color."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 9,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L9"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 240,
					"name": "avatar",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's avatar hash."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 14,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L14"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 241,
					"name": "avatarDecoration",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's avatar decoration hash."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 19,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L19"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 242,
					"name": "banner",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's banner hash."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 24,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L24"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 243,
					"name": "bot",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the user is a bot."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 29,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L29"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 244,
					"name": "discriminator",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's discriminator."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 34,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L34"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 245,
					"name": "email",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's email address."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 39,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L39"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 246,
					"name": "flags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's flags."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 44,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L44"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 247,
					"name": "globalName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's global name."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 49,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L49"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 248,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's id."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 54,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L54"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 249,
					"name": "locale",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's preferred locale."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 59,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L59"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 250,
					"name": "mfaEnabled",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether multi-factor authentication (MFA) is enabled for the user."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 64,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L64"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 251,
					"name": "premiumType",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's premium type."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 69,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L69"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 252,
					"name": "publicFlags",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's public flags."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 74,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L74"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 253,
					"name": "system",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the user is a system user."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 79,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L79"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 254,
					"name": "username",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The user's username."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 84,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L84"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 255,
					"name": "verified",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPublic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the user is verified."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/structures/User.ts",
							"line": 89,
							"character": 11,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L89"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						236
					]
				},
				{
					"title": "Properties",
					"children": [
						239,
						240,
						241,
						242,
						243,
						244,
						245,
						246,
						247,
						248,
						249,
						250,
						251,
						252,
						253,
						254,
						255
					]
				}
			],
			"sources": [
				{
					"fileName": "src/structures/User.ts",
					"line": 4,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/structures/User.ts#L4"
				}
			]
		},
		{
			"id": 256,
			"name": "WebsocketClient",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "A WebSocket client for connecting to the Discord Gateway and handling communication."
					}
				]
			},
			"children": [
				{
					"id": 297,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 32,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L32"
						}
					],
					"signatures": [
						{
							"id": 298,
							"name": "new WebsocketClient",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a new WebsocketClient instance."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 32,
									"character": 4,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L32"
								}
							],
							"parameters": [
								{
									"id": 299,
									"name": "client",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The Discord client instance."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 1,
										"name": "default",
										"package": "solace.js"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.constructor"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.constructor"
					}
				},
				{
					"id": 301,
					"name": "_ws",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the WebSocket instance used for communication with the Discord Gateway"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 21,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L21"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@types/ws/index.d.ts",
									"qualifiedName": "WebSocket"
								},
								"name": "WebSocket",
								"package": "@types/ws"
							}
						]
					},
					"defaultValue": "null"
				},
				{
					"id": 303,
					"name": "client",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Discord client instance."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 32,
							"character": 24,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L32"
						}
					],
					"type": {
						"type": "reference",
						"target": 1,
						"name": "default",
						"package": "solace.js"
					}
				},
				{
					"id": 300,
					"name": "gateway",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the URL of the Discord Gateway to which the WebSocket client will establish a connection"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 17,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L17"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"defaultValue": "null"
				},
				{
					"id": 302,
					"name": "heartbeatInterval",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "represents a Node.js timeout object that is used to periodically send heartbeat messages to the Discord Gateway to maintain the connection."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 26,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L26"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@types/node/timers.d.ts",
									"qualifiedName": "__global.NodeJS.Timeout"
								},
								"name": "Timeout",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.Timeout"
							}
						]
					},
					"defaultValue": "null"
				},
				{
					"id": 294,
					"name": "captureRejectionSymbol",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: "
							},
							{
								"kind": "code",
								"text": "`Symbol.for('nodejs.rejection')`"
							},
							{
								"kind": "text",
								"text": "\n\nSee how to write a custom "
							},
							{
								"kind": "code",
								"text": "`rejection handler`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 390,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 39,
							"name": "captureRejectionSymbol",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.captureRejectionSymbol"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.captureRejectionSymbol"
					}
				},
				{
					"id": 295,
					"name": "captureRejections",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
							},
							{
								"kind": "code",
								"text": "`captureRejections`"
							},
							{
								"kind": "text",
								"text": " option on all new "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " objects."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.4.0, v12.16.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 397,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.captureRejections"
					}
				},
				{
					"id": 296,
					"name": "defaultMaxListeners",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "By default, a maximum of "
							},
							{
								"kind": "code",
								"text": "`10`"
							},
							{
								"kind": "text",
								"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances\nusing the "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " method. To change the default\nfor _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": "property can be used. If this value is not a positive number, a "
							},
							{
								"kind": "code",
								"text": "`RangeError`"
							},
							{
								"kind": "text",
								"text": "is thrown.\n\nTake caution when setting the "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": " because the\nchange affects _all_"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instances, including those created before\nthe change is made. However, calling "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners(n)`"
							},
							{
								"kind": "text",
								"text": " still has\nprecedence over "
							},
							{
								"kind": "code",
								"text": "`events.defaultMaxListeners`"
							},
							{
								"kind": "text",
								"text": ".\n\nThis is not a hard limit. The "
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
							},
							{
								"kind": "code",
								"text": "`EventEmitter`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`emitter.getMaxListeners()`"
							},
							{
								"kind": "text",
								"text": " and "
							},
							{
								"kind": "code",
								"text": "`emitter.setMaxListeners()`"
							},
							{
								"kind": "text",
								"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
							},
							{
								"kind": "code",
								"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
							},
							{
								"kind": "text",
								"text": "\n\nThe "
							},
							{
								"kind": "code",
								"text": "`--trace-warnings`"
							},
							{
								"kind": "text",
								"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
							},
							{
								"kind": "code",
								"text": "`process.on('warning')`"
							},
							{
								"kind": "text",
								"text": " and will\nhave the additional "
							},
							{
								"kind": "code",
								"text": "`emitter`"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "code",
								"text": "`type`"
							},
							{
								"kind": "text",
								"text": ", and "
							},
							{
								"kind": "code",
								"text": "`count`"
							},
							{
								"kind": "text",
								"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
							},
							{
								"kind": "code",
								"text": "`name`"
							},
							{
								"kind": "text",
								"text": " property is set to "
							},
							{
								"kind": "code",
								"text": "`'MaxListenersExceededWarning'`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v0.11.2"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 434,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.defaultMaxListeners"
					}
				},
				{
					"id": 293,
					"name": "errorMonitor",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true,
						"isExternal": true,
						"isReadonly": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This symbol shall be used to install a listener for only monitoring "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": "events. Listeners installed using this symbol are called before the regular"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " event is emitted. Therefore, the process will still crash if no\nregular "
							},
							{
								"kind": "code",
								"text": "`'error'`"
							},
							{
								"kind": "text",
								"text": " listener is installed."
							}
						],
						"blockTags": [
							{
								"tag": "@since",
								"content": [
									{
										"kind": "text",
										"text": "v13.6.0, v12.17.0"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 383,
							"character": 24
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"target": 38,
							"name": "errorMonitor",
							"package": "@types/node",
							"qualifiedName": "EventEmitter.errorMonitor"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.errorMonitor"
					}
				},
				{
					"id": 317,
					"name": "addListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 454,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 318,
							"name": "addListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.on(eventName, listener)`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 454,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 319,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 320,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 321,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 454,
													"character": 66
												}
											],
											"signatures": [
												{
													"id": 322,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 454,
															"character": 66
														}
													],
													"parameters": [
														{
															"id": 323,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.addListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.addListener"
					}
				},
				{
					"id": 304,
					"name": "connect",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPublic": true
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 39,
							"character": 17,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L39"
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "connect",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Establishes a connection to the Discord Gateway."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 39,
									"character": 17,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L39"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 366,
					"name": "emit",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 716,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 367,
							"name": "emit",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Synchronously calls each of the listeners registered for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", in the order they were registered, passing the supplied arguments\nto each.\n\nReturns "
									},
									{
										"kind": "code",
										"text": "`true`"
									},
									{
										"kind": "text",
										"text": " if the event had listeners, "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": " otherwise.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEmitter = new EventEmitter();\n\n// First listener\nmyEmitter.on('event', function firstListener() {\n  console.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\n  console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\n  const parameters = args.join(', ');\n  console.log(`event with parameters ${parameters} in third listener`);\n});\n\nconsole.log(myEmitter.listeners('event'));\n\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 716,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 368,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 369,
									"name": "args",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.emit"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.emit"
					}
				},
				{
					"id": 388,
					"name": "eventNames",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 779,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 389,
							"name": "eventNames",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
									},
									{
										"kind": "code",
										"text": "`Symbol`"
									},
									{
										"kind": "text",
										"text": "s.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 779,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "symbol"
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.eventNames"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.eventNames"
					}
				},
				{
					"id": 358,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 631,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 359,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the current max listener value for the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " which is either\nset by "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " or defaults to "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "defaultMaxListeners",
										"target": 296
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v1.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 631,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 308,
					"name": "identify",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 99,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L99"
						}
					],
					"signatures": [
						{
							"id": 309,
							"name": "identify",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends the IDENTIFY payload to the Discord Gateway upon establishing a connection."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 99,
									"character": 12,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L99"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 370,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 725,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 371,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the number of listeners listening for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\nIf "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v3.2.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 725,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 372,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 373,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event handler function"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Function"
										},
										"name": "Function",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 360,
					"name": "listeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 644,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 361,
							"name": "listeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 644,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 362,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listeners"
					}
				},
				{
					"id": 345,
					"name": "off",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 604,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 346,
							"name": "off",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Alias for "
									},
									{
										"kind": "code",
										"text": "`emitter.removeListener()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v10.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 604,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 347,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 348,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 349,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 604,
													"character": 58
												}
											],
											"signatures": [
												{
													"id": 350,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 604,
															"character": 58
														}
													],
													"parameters": [
														{
															"id": 351,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.off"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.off"
					}
				},
				{
					"id": 324,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 486,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 325,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the end of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.101"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 486,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 326,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 327,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 328,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 486,
													"character": 57
												}
											],
											"signatures": [
												{
													"id": 329,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 486,
															"character": 57
														}
													],
													"parameters": [
														{
															"id": 330,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 331,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 516,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 332,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". The\nnext time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this listener is removed and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
									},
									{
										"kind": "code",
										"text": "`emitter.prependOnceListener()`"
									},
									{
										"kind": "text",
										"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 516,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 333,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 334,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 335,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 516,
													"character": 59
												}
											],
											"signatures": [
												{
													"id": 336,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 516,
															"character": 59
														}
													],
													"parameters": [
														{
															"id": 337,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 374,
					"name": "prependListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 743,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 375,
							"name": "prependListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function to the _beginning_ of the listeners array for the\nevent named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ". No checks are made to see if the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " has\nalready been added. Multiple calls passing the same combination of "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "and "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " will result in the "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " being added, and called, multiple\ntimes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 743,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 376,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 377,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 378,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 743,
													"character": 70
												}
											],
											"signatures": [
												{
													"id": 379,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 743,
															"character": 70
														}
													],
													"parameters": [
														{
															"id": 380,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.prependListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.prependListener"
					}
				},
				{
					"id": 381,
					"name": "prependOnceListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 759,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 382,
							"name": "prependOnceListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Adds a **one-time**"
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " function for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " to the _beginning_ of the listeners array. The next time "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v6.0.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 759,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 383,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 384,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The callback function"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 385,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 759,
													"character": 74
												}
											],
											"signatures": [
												{
													"id": 386,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 759,
															"character": 74
														}
													],
													"parameters": [
														{
															"id": 387,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.prependOnceListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.prependOnceListener"
					}
				},
				{
					"id": 363,
					"name": "rawListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 675,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 364,
							"name": "rawListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ",\nincluding any wrappers (such as those created by "
									},
									{
										"kind": "code",
										"text": "`.once()`"
									},
									{
										"kind": "text",
										"text": ").\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v9.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 675,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 365,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.rawListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.rawListeners"
					}
				},
				{
					"id": 306,
					"name": "reconnect",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 87,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L87"
						}
					],
					"signatures": [
						{
							"id": 307,
							"name": "reconnect",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Initiates the reconnection process to the Discord Gateway.\r\nStops sending heartbeats, clears the WebSocket instance, and attempts to reconnect after a delay."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 87,
									"character": 12,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L87"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 352,
					"name": "removeAllListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 615,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 353,
							"name": "removeAllListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes all listeners, or those of the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 615,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 354,
									"name": "event",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.removeAllListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.removeAllListeners"
					}
				},
				{
					"id": 338,
					"name": "removeListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 599,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 339,
							"name": "removeListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Removes the specified "
									},
									{
										"kind": "code",
										"text": "`listener`"
									},
									{
										"kind": "text",
										"text": " from the listener array for the event named"
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"
									},
									{
										"kind": "text",
										"text": "\n\n"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ", then "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`removeAllListeners()`"
									},
									{
										"kind": "text",
										"text": " calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"
									},
									{
										"kind": "code",
										"text": "`emit()`"
									},
									{
										"kind": "text",
										"text": " in progress. Subsequent events behave as expected.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"
									},
									{
										"kind": "text",
										"text": "\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "
									},
									{
										"kind": "code",
										"text": "`emitter.listeners()`"
									},
									{
										"kind": "text",
										"text": " method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "
									},
									{
										"kind": "code",
										"text": "`removeListener()`"
									},
									{
										"kind": "text",
										"text": " will remove the most\nrecently added instance. In the example the "
									},
									{
										"kind": "code",
										"text": "`once('ping')`"
									},
									{
										"kind": "text",
										"text": "listener is removed:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.1.26"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 599,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 340,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 341,
									"name": "listener",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 342,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 599,
													"character": 69
												}
											],
											"signatures": [
												{
													"id": 343,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 599,
															"character": 69
														}
													],
													"parameters": [
														{
															"id": 344,
															"name": "args",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true,
																"isRest": true
															},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.removeListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.removeListener"
					}
				},
				{
					"id": 315,
					"name": "sendHeartbeat",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 139,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L139"
						}
					],
					"signatures": [
						{
							"id": 316,
							"name": "sendHeartbeat",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Sends a heartbeat to the Discord Gateway."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 139,
									"character": 12,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L139"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 355,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 625,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 356,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s will print a warning if more than "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " method allows the limit to be\nmodified for this specific "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance. The value can be set to"
									},
									{
										"kind": "code",
										"text": "`Infinity`"
									},
									{
										"kind": "text",
										"text": " (or "
									},
									{
										"kind": "code",
										"text": "`0`"
									},
									{
										"kind": "text",
										"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", so that calls can be chained."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.3.5"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 625,
									"character": 16
								}
							],
							"parameters": [
								{
									"id": 357,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 256,
								"name": "default",
								"package": "solace.js"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.setMaxListeners"
					}
				},
				{
					"id": 310,
					"name": "startHeartbeat",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 123,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L123"
						}
					],
					"signatures": [
						{
							"id": 311,
							"name": "startHeartbeat",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Starts sending heartbeats at the specified interval."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 123,
									"character": 12,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L123"
								}
							],
							"parameters": [
								{
									"id": 312,
									"name": "interval",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The heartbeat interval in milliseconds."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 313,
					"name": "stopHeartbeat",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/client/WebsocketClient.ts",
							"line": 132,
							"character": 12,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L132"
						}
					],
					"signatures": [
						{
							"id": 314,
							"name": "stopHeartbeat",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stops sending heartbeats."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/client/WebsocketClient.ts",
									"line": 132,
									"character": 12,
									"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L132"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 286,
					"name": "addAbortListener",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 375,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 287,
							"name": "addAbortListener",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Listens once to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on the provided "
									},
									{
										"kind": "code",
										"text": "`signal`"
									},
									{
										"kind": "text",
										"text": ".\n\nListening to the "
									},
									{
										"kind": "code",
										"text": "`abort`"
									},
									{
										"kind": "text",
										"text": " event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall "
									},
									{
										"kind": "code",
										"text": "`e.stopImmediatePropagation()`"
									},
									{
										"kind": "text",
										"text": ". Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": "s in Node.js APIs by solving these\ntwo issues by listening to the event such that "
									},
									{
										"kind": "code",
										"text": "`stopImmediatePropagation`"
									},
									{
										"kind": "text",
										"text": " does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v20.5.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that removes the "
											},
											{
												"kind": "code",
												"text": "`abort`"
											},
											{
												"kind": "text",
												"text": " listener."
											}
										]
									}
								],
								"modifierTags": [
									"@experimental"
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 375,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 288,
									"name": "signal",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
											"qualifiedName": "AbortSignal"
										},
										"name": "AbortSignal",
										"package": "typescript"
									}
								},
								{
									"id": 289,
									"name": "resource",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 290,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {
												"isExternal": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/node/events.d.ts",
													"line": 375,
													"character": 63
												}
											],
											"signatures": [
												{
													"id": 291,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 375,
															"character": 63
														}
													],
													"parameters": [
														{
															"id": 292,
															"name": "event",
															"variant": "param",
															"kind": 32768,
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "node_modules/typescript/lib/lib.dom.d.ts",
																	"qualifiedName": "Event"
																},
																"name": "Event",
																"package": "typescript"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/@types/node/globals.d.ts",
									"qualifiedName": "Disposable"
								},
								"name": "Disposable",
								"package": "@types/node"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.addAbortListener"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.addAbortListener"
					}
				},
				{
					"id": 275,
					"name": "getEventListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 296,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 276,
							"name": "getEventListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns a copy of the array of listeners for the event named "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": ".\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.listeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.2.0, v14.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 296,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 277,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "_DOMEventTarget"
												},
												"name": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								},
								{
									"id": 278,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
										"qualifiedName": "Function"
									},
									"name": "Function",
									"package": "typescript"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getEventListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getEventListeners"
					}
				},
				{
					"id": 279,
					"name": "getMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 325,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 280,
							"name": "getMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Returns the currently set max amount of listeners.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": "s this behaves exactly the same as calling "
									},
									{
										"kind": "code",
										"text": "`.getMaxListeners`"
									},
									{
										"kind": "text",
										"text": " on\nthe emitter.\n\nFor "
									},
									{
										"kind": "code",
										"text": "`EventTarget`"
									},
									{
										"kind": "text",
										"text": "s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v19.9.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 325,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 281,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "node_modules/@types/node/events.d.ts",
													"qualifiedName": "_DOMEventTarget"
												},
												"name": "_DOMEventTarget",
												"package": "@types/node"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.getMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.getMaxListeners"
					}
				},
				{
					"id": 271,
					"name": "listenerCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 268,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 272,
							"name": "listenerCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A class method that returns the number of listeners for the given "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": "registered on the given "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ".\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.9.12"
											}
										]
									},
									{
										"tag": "@deprecated",
										"content": [
											{
												"kind": "text",
												"text": "Since v3.2.0 - Use "
											},
											{
												"kind": "code",
												"text": "`listenerCount`"
											},
											{
												"kind": "text",
												"text": " instead."
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 268,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 273,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The emitter to query"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 274,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event name"
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.listenerCount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.listenerCount"
					}
				},
				{
					"id": 266,
					"name": "on",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 250,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 267,
							"name": "on",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
									},
									{
										"kind": "text",
										"text": "\n\nReturns an "
									},
									{
										"kind": "code",
										"text": "`AsyncIterator`"
									},
									{
										"kind": "text",
										"text": " that iterates "
									},
									{
										"kind": "code",
										"text": "`eventName`"
									},
									{
										"kind": "text",
										"text": " events. It will throw\nif the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": ". It removes all listeners when\nexiting the loop. The "
									},
									{
										"kind": "code",
										"text": "`value`"
									},
									{
										"kind": "text",
										"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting on events:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.16.0"
											}
										]
									},
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events emitted by the "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 250,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 268,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "__global.NodeJS.EventEmitter"
										},
										"name": "EventEmitter",
										"package": "@types/node",
										"qualifiedName": "__global.NodeJS.EventEmitter"
									}
								},
								{
									"id": 269,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The name of the event being listened for"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 270,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
									"qualifiedName": "AsyncIterableIterator"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "AsyncIterableIterator",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.on"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.on"
					}
				},
				{
					"id": 257,
					"name": "once",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 189,
							"character": 15
						},
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 190,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 258,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Creates a "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " that is fulfilled when the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits the given\nevent or that is rejected if the "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " emits "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " while waiting.\nThe "
									},
									{
										"kind": "code",
										"text": "`Promise`"
									},
									{
										"kind": "text",
										"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event\nsemantics and does not listen to the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event.\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe special handling of the "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is only used when "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": "is used to wait for another event. If "
									},
									{
										"kind": "code",
										"text": "`events.once()`"
									},
									{
										"kind": "text",
										"text": " is used to wait for the\n'"
									},
									{
										"kind": "code",
										"text": "`error'`"
									},
									{
										"kind": "text",
										"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
									},
									{
										"kind": "text",
										"text": "\n\nAn "
									},
									{
										"kind": "code",
										"text": "`AbortSignal`"
									},
									{
										"kind": "text",
										"text": " can be used to cancel waiting for the event:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v11.13.0, v10.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 189,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 259,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "_NodeEventTarget"
										},
										"name": "_NodeEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 260,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								},
								{
									"id": 261,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						},
						{
							"id": 262,
							"name": "once",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 190,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 263,
									"name": "emitter",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "_DOMEventTarget"
										},
										"name": "_DOMEventTarget",
										"package": "@types/node"
									}
								},
								{
									"id": 264,
									"name": "eventName",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 265,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "node_modules/@types/node/events.d.ts",
											"qualifiedName": "StaticEventEmitterOptions"
										},
										"name": "StaticEventEmitterOptions",
										"package": "@types/node"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.once"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.once"
					}
				},
				{
					"id": 282,
					"name": "setMaxListeners",
					"variant": "declaration",
					"kind": 2048,
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/node/events.d.ts",
							"line": 340,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 283,
							"name": "setMaxListeners",
							"variant": "signature",
							"kind": 4096,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "code",
										"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v15.4.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 340,
									"character": 15
								}
							],
							"parameters": [
								{
									"id": 284,
									"name": "n",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A non-negative number. The maximum number of listeners per "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": " event."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 285,
									"name": "eventTargets",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isExternal": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/@types/node/events.d.ts",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													"name": "EventEmitter",
													"package": "@types/node",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "node_modules/@types/node/events.d.ts",
														"qualifiedName": "_DOMEventTarget"
													},
													"name": "_DOMEventTarget",
													"package": "@types/node"
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "EventEmitter.setMaxListeners"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"target": -1,
						"name": "EventEmitter.setMaxListeners"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						297
					]
				},
				{
					"title": "Properties",
					"children": [
						301,
						303,
						300,
						302,
						294,
						295,
						296,
						293
					]
				},
				{
					"title": "Methods",
					"children": [
						317,
						304,
						366,
						388,
						358,
						308,
						370,
						360,
						345,
						324,
						331,
						374,
						381,
						363,
						306,
						352,
						338,
						315,
						355,
						310,
						313,
						286,
						275,
						279,
						271,
						266,
						257,
						282
					]
				}
			],
			"sources": [
				{
					"fileName": "src/client/WebsocketClient.ts",
					"line": 12,
					"character": 21,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/client/WebsocketClient.ts#L12"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "node_modules/@types/node/events.d.ts",
						"qualifiedName": "EventEmitter"
					},
					"name": "EventEmitter",
					"package": "@types/node"
				}
			]
		},
		{
			"id": 125,
			"name": "ClientEvents",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Interface defining the structure of client events and their associated argument types."
					}
				]
			},
			"children": [
				{
					"id": 126,
					"name": "ready",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Represents the \"ready\" event, which is emitted when the client is ready.\r\n ready"
							}
						],
						"blockTags": [
							{
								"tag": "@param",
								"name": "client",
								"content": [
									{
										"kind": "text",
										"text": "The Discord client instance that emitted the event."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/ClientEvents.ts",
							"line": 13,
							"character": 4
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "namedTupleMember",
								"name": "client",
								"isOptional": false,
								"element": {
									"type": "reference",
									"target": 1,
									"name": "default",
									"package": "solace.js"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Events",
					"children": [
						126
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/ClientEvents.ts",
					"line": 6,
					"character": 25
				}
			]
		},
		{
			"id": 127,
			"name": "ClientOptions",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Interface defining the structure of client options required for initializing a Discord client."
					}
				]
			},
			"children": [
				{
					"id": 129,
					"name": "intents",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The gateway intents specifying the events the bot is interested in."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "GatewayIntents",
										"target": 157,
										"tsLinkText": ""
									},
									{
										"kind": "text",
										"text": " for predefined intent values."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/ClientOptions.ts",
							"line": 19,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/interfaces/ClientOptions.ts#L19"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "reference",
								"target": 157,
								"name": "default",
								"package": "solace.js"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 157,
									"name": "default",
									"package": "solace.js"
								}
							}
						]
					}
				},
				{
					"id": 128,
					"name": "token",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The Discord bot token used for authentication and authorization."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/interfaces/ClientOptions.ts",
							"line": 12,
							"character": 4,
							"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/interfaces/ClientOptions.ts#L12"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						129,
						128
					]
				}
			],
			"sources": [
				{
					"fileName": "src/interfaces/ClientOptions.ts",
					"line": 6,
					"character": 25,
					"url": "https://github.com/solacejs/solace.js/blob/9a68640/src/interfaces/ClientOptions.ts#L6"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				1,
				130,
				135,
				146,
				157,
				182,
				196,
				203,
				220,
				235,
				256
			]
		},
		{
			"title": "Interfaces",
			"children": [
				125,
				127
			]
		}
	],
	"packageName": "solace.js",
	"packageVersion": "0.0.1",
	"readme": [
		{
			"kind": "text",
			"text": "# Solace.js\r\n\r\nSolace.js is an alternative to eris and discord.js, a nodejs wrapper for interfacing with discord. The goal of solace.js is to make discord bot development faster. The project structure is sort of similar to discord.js making it easy to move to. With solace.js you can get work done in a faster way.\r\n\r\n## Installation\r\n"
		},
		{
			"kind": "code",
			"text": "```\r\nnpm install discord.js\r\nyarn add discord.js\r\npnpm add discord.js\r\n```"
		},
		{
			"kind": "text",
			"text": "\r\n\r\n## Usage\r\n"
		},
		{
			"kind": "code",
			"text": "```ts\r\nimport { Client, Event, GatewayIntents, Registry, SolaceIntents } from \"solace.js\";\r\nimport ReadyEvent from \"./events/ReadyEvent\";\r\n\r\n/**\r\n * You can use intent groups such as SolaceIntents or just use an array of GatewayIntents\r\n**/\r\nconst client = new Client({ token: \"BOT_TOKEN\", intents: SolaceIntents.GENERAL });\r\n\r\nconst events: Event[] = [];\r\n\r\nRegistry.registerEvents(client, new ReadyEvent());\r\n\r\nclient.login();\r\n```"
		},
		{
			"kind": "text",
			"text": "\r\n"
		},
		{
			"kind": "code",
			"text": "`Ready Event example`"
		},
		{
			"kind": "text",
			"text": "\r\n"
		},
		{
			"kind": "code",
			"text": "```ts\r\nimport { Client, Event } from \"solace.js\";\r\n\r\nexport default class ReadyEvent extends Event {\r\n\r\n    constructor() {\r\n        super(\"ready\", true);\r\n    }\r\n\r\n    public async execute(client: Client) {\r\n        console.log(client.user!.username, \"is online!\");\r\n    }\r\n}\r\n```"
		}
	],
	"symbolIdMap": {
		"0": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default"
		},
		"2": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"3": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"4": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"5": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"6": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"7": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"8": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"9": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"10": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"11": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"12": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"13": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"14": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"15": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"16": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"17": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"18": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"19": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"20": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"21": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"22": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"23": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"24": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"25": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"26": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"27": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"28": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"29": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"30": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"31": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"32": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"33": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"34": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"35": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"36": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"37": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"38": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"39": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"40": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"41": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"42": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.__constructor"
		},
		"43": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default"
		},
		"44": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "options"
		},
		"45": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.ws"
		},
		"46": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.user"
		},
		"47": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.options"
		},
		"48": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.once"
		},
		"49": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.once"
		},
		"50": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "K"
		},
		"51": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "event"
		},
		"52": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "listener"
		},
		"53": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "__type"
		},
		"54": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "__type"
		},
		"55": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "args"
		},
		"56": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.on"
		},
		"57": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.on"
		},
		"58": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "K"
		},
		"59": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "event"
		},
		"60": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "listener"
		},
		"61": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "__type"
		},
		"62": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "__type"
		},
		"63": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "args"
		},
		"64": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.login"
		},
		"65": {
			"sourceFileName": "src/client/Client.ts",
			"qualifiedName": "default.login"
		},
		"66": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"67": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"68": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"69": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"70": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"71": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"72": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"73": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"74": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"75": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"76": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"77": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"78": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"79": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"80": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"81": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"82": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"83": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"84": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"85": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"86": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"87": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"88": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"89": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"90": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"91": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"92": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"93": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"94": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"95": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"96": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"97": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"98": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"99": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"100": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"101": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"102": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"103": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"104": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"105": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"106": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"107": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"108": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"109": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"110": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"111": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"112": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"113": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"114": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"115": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"116": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"117": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"118": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"119": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"120": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"121": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"122": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"123": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"124": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"125": {
			"sourceFileName": "src/interfaces/ClientEvents.ts",
			"qualifiedName": "default"
		},
		"126": {
			"sourceFileName": "src/interfaces/ClientEvents.ts",
			"qualifiedName": "default.ready"
		},
		"127": {
			"sourceFileName": "src/interfaces/ClientOptions.ts",
			"qualifiedName": "default"
		},
		"128": {
			"sourceFileName": "src/interfaces/ClientOptions.ts",
			"qualifiedName": "default.token"
		},
		"129": {
			"sourceFileName": "src/interfaces/ClientOptions.ts",
			"qualifiedName": "default.intents"
		},
		"130": {
			"sourceFileName": "src/config/Constants.ts",
			"qualifiedName": "default"
		},
		"131": {
			"sourceFileName": "src/config/Constants.ts",
			"qualifiedName": "default.API"
		},
		"132": {
			"sourceFileName": "src/config/Constants.ts",
			"qualifiedName": "default.GATEWAY"
		},
		"135": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default"
		},
		"136": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default.__constructor"
		},
		"137": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default"
		},
		"138": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "name"
		},
		"139": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "once"
		},
		"140": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default.name"
		},
		"141": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default.once"
		},
		"142": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default.execute"
		},
		"143": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "default.execute"
		},
		"144": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "client"
		},
		"145": {
			"sourceFileName": "src/helper/Event.ts",
			"qualifiedName": "args"
		},
		"146": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "default"
		},
		"147": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "default.READY"
		},
		"148": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "default.READY"
		},
		"149": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "client"
		},
		"150": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "data"
		},
		"151": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "default.MESSAGE_CREATE"
		},
		"152": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "default.MESSAGE_CREATE"
		},
		"153": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "client"
		},
		"154": {
			"sourceFileName": "src/util/EventHandler.ts",
			"qualifiedName": "data"
		},
		"157": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default"
		},
		"158": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILDS"
		},
		"159": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_MEMBERS"
		},
		"160": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_MODERATION"
		},
		"161": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_EMOJIS_AND_STICKERS"
		},
		"162": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_INTEGRATIONS"
		},
		"163": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_WEBHOOKS"
		},
		"164": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_INVITES"
		},
		"165": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_VOICE_STATES"
		},
		"166": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_PRESENCES"
		},
		"167": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_MESSAGES"
		},
		"168": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_MESSAGE_REACTIONS"
		},
		"169": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_MESSAGE_TYPING"
		},
		"170": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.DIRECT_MESSAGES"
		},
		"171": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.DIRECT_MESSAGE_REACTIONS"
		},
		"172": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.DIRECT_MESSAGE_TYPING"
		},
		"173": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.MESSAGE_CONTENT"
		},
		"174": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.GUILD_SCHEDULED_EVENTS"
		},
		"175": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.AUTO_MODERATION_CONFIGURATION"
		},
		"176": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.AUTO_MODERATION_EXECUTION"
		},
		"177": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.combineIntents"
		},
		"178": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "default.combineIntents"
		},
		"179": {
			"sourceFileName": "src/config/GatewayIntents.ts",
			"qualifiedName": "intents"
		},
		"182": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default"
		},
		"183": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.DISPATCH"
		},
		"184": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.HEARTBEAT"
		},
		"185": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.IDENTIFY"
		},
		"186": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.PRESENCE_UPDATE"
		},
		"187": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.VOICE_STATE_UPDATE"
		},
		"188": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.RESUME"
		},
		"189": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.RECONNECT"
		},
		"190": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.REQUEST_GUILD_MEMBERS"
		},
		"191": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.INVALID_SESSION"
		},
		"192": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.HELLO"
		},
		"193": {
			"sourceFileName": "src/config/OpCodes.ts",
			"qualifiedName": "default.HEARTBEAT_ACK"
		},
		"196": {
			"sourceFileName": "src/helper/Registry.ts",
			"qualifiedName": "default"
		},
		"197": {
			"sourceFileName": "src/helper/Registry.ts",
			"qualifiedName": "default.registerEvents"
		},
		"198": {
			"sourceFileName": "src/helper/Registry.ts",
			"qualifiedName": "default.registerEvents"
		},
		"199": {
			"sourceFileName": "src/helper/Registry.ts",
			"qualifiedName": "client"
		},
		"200": {
			"sourceFileName": "src/helper/Registry.ts",
			"qualifiedName": "args"
		},
		"203": {
			"sourceFileName": "src/util/SolaceError.ts",
			"qualifiedName": "default"
		},
		"204": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "ErrorConstructor.captureStackTrace"
		},
		"205": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "ErrorConstructor.captureStackTrace"
		},
		"206": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "targetObject"
		},
		"207": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "constructorOpt"
		},
		"208": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "ErrorConstructor.prepareStackTrace"
		},
		"209": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "__type"
		},
		"210": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "__type"
		},
		"211": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "err"
		},
		"212": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "stackTraces"
		},
		"213": {
			"sourceFileName": "node_modules/@types/node/globals.d.ts",
			"qualifiedName": "ErrorConstructor.stackTraceLimit"
		},
		"214": {
			"sourceFileName": "src/util/SolaceError.ts",
			"qualifiedName": "default.__constructor"
		},
		"215": {
			"sourceFileName": "src/util/SolaceError.ts",
			"qualifiedName": "default"
		},
		"216": {
			"sourceFileName": "src/util/SolaceError.ts",
			"qualifiedName": "code"
		},
		"217": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error.name"
		},
		"218": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error.message"
		},
		"219": {
			"sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
			"qualifiedName": "Error.stack"
		},
		"220": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default"
		},
		"221": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.GENERAL"
		},
		"222": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.MODERATION"
		},
		"223": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.MUSIC"
		},
		"224": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.INVITE_TRACKER"
		},
		"225": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.EMOJI_MANAGER"
		},
		"226": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.INTEGRATION_MANAGER"
		},
		"227": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.WEBHOOK_MANAGER"
		},
		"228": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.VOICE_STATE_MONITOR"
		},
		"229": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.PRESENCE_MONITOR"
		},
		"230": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.DIRECT_MESSAGE_MONITOR"
		},
		"231": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.MESSAGE_CONTENT_MONITOR"
		},
		"232": {
			"sourceFileName": "src/config/SolaceIntents.ts",
			"qualifiedName": "default.AUTO_MODERATION"
		},
		"235": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default"
		},
		"236": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.__constructor"
		},
		"237": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default"
		},
		"238": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "data"
		},
		"239": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.accentColor"
		},
		"240": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.avatar"
		},
		"241": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.avatarDecoration"
		},
		"242": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.banner"
		},
		"243": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.bot"
		},
		"244": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.discriminator"
		},
		"245": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.email"
		},
		"246": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.flags"
		},
		"247": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.globalName"
		},
		"248": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.id"
		},
		"249": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.locale"
		},
		"250": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.mfaEnabled"
		},
		"251": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.premiumType"
		},
		"252": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.publicFlags"
		},
		"253": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.system"
		},
		"254": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.username"
		},
		"255": {
			"sourceFileName": "src/structures/User.ts",
			"qualifiedName": "default.verified"
		},
		"256": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default"
		},
		"257": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"258": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"259": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"260": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"261": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"262": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"263": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"264": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"265": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"266": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"267": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"268": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"269": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"270": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"271": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"272": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"273": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"274": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"275": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"276": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"277": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"278": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"279": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"280": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getMaxListeners"
		},
		"281": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"282": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"283": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"284": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"285": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"286": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"287": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.addAbortListener"
		},
		"288": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "signal"
		},
		"289": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "resource"
		},
		"290": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"291": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"292": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"293": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"294": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"295": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"296": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"297": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.__constructor"
		},
		"298": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default"
		},
		"299": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "client"
		},
		"300": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.gateway"
		},
		"301": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default._ws"
		},
		"302": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.heartbeatInterval"
		},
		"303": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.client"
		},
		"304": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.connect"
		},
		"305": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.connect"
		},
		"306": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.reconnect"
		},
		"307": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.reconnect"
		},
		"308": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.identify"
		},
		"309": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.identify"
		},
		"310": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.startHeartbeat"
		},
		"311": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.startHeartbeat"
		},
		"312": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "interval"
		},
		"313": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.stopHeartbeat"
		},
		"314": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.stopHeartbeat"
		},
		"315": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.sendHeartbeat"
		},
		"316": {
			"sourceFileName": "src/client/WebsocketClient.ts",
			"qualifiedName": "default.sendHeartbeat"
		},
		"317": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"318": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.addListener"
		},
		"319": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"320": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"321": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"322": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"323": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"324": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"325": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.on"
		},
		"326": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"327": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"328": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"329": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"330": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"331": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"332": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"333": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"334": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"335": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"336": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"337": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"338": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"339": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeListener"
		},
		"340": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"341": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"342": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"343": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"344": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"345": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"346": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.off"
		},
		"347": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"348": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"349": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"350": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"351": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"352": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"353": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.removeAllListeners"
		},
		"354": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "event"
		},
		"355": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"356": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"357": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"358": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"359": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"360": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"361": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"362": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"363": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"364": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"365": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"366": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"367": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.emit"
		},
		"368": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"369": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"370": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"371": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"372": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"373": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"374": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"375": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"376": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"377": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"378": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"379": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"380": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"381": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"382": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"383": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"384": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"385": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"386": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"387": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"388": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"389": {
			"sourceFileName": "node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		}
	}
}